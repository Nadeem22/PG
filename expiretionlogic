for (Entry<String, List<ProductOrder>> orderEntry : orderGroupMap.entrySet()) {
    String counterId = orderEntry.getKey();
    if (counterIds.contains(counterId)) {
        // Call a separate method to handle draft order updates and adding orders to poList
        handleDraftOrdersAndAddToPoList(counterId, orderEntry.getValue(), poList);
    } else {
        // Handle invalid counters
        invalidCounter.add(counterId);
        orderEntry.getValue().forEach(order -> invalidIFOrderCode.add(order.getOrderCode()));
    }
}

if (!poList.isEmpty()) {
    saveProductOrder(poList);
    Log.info(InventoryConstants.LOG_UPDATEIFORDER_SAVE_ORDER_SIZE, poList.size());
}
++++
private void handleDraftOrdersAndAddToPoList(String counterId, List<ProductOrder> orderList, List<ProductOrder> poList) {
    // Check if a record exists with order_state = 'draft' for this counterId
    ProductOrder draftOrder = entityManager.createQuery(
            "SELECT po FROM ProductOrder po WHERE po.counterId = :counterId AND po.orderState = :orderState", 
            ProductOrder.class)
            .setParameter("counterId", counterId)
            .setParameter("orderState", "draft")
            .getResultStream()
            .findFirst()
            .orElse(null);

    if (draftOrder != null) {
        // Update the order state to 'expired'
        draftOrder.setOrderState("expired");
        entityManager.merge(draftOrder);
        Log.info("Updated draft order to expired for counterId: {}", counterId);
    }

    // Add the new orders to the poList
    poList.addAll(orderList);
}
=================
for (Entry<String, List<ProductOrder>> orderEntry : orderGroupMap.entrySet()) {
    String counterId = orderEntry.getKey();
    if (counterIds.contains(counterId)) {
        // Check if a record exists with order_state = 'draft' for this counterId
        ProductOrder draftOrder = entityManager.createQuery(
            "SELECT po FROM ProductOrder po WHERE po.counterId = :counterId AND po.orderState = :orderState", 
            ProductOrder.class)
            .setParameter("counterId", counterId)
            .setParameter("orderState", "draft")
            .getResultStream()
            .findFirst()
            .orElse(null);

        if (draftOrder != null) {
            // Update the order state to 'expired'
            draftOrder.setOrderState("expired");
            entityManager.merge(draftOrder);
        }

        List<ProductOrder> orderList = orderEntry.getValue();
        poList.addAll(orderList);
    } else {
        // Handle invalid counters
        invalidCounter.add(counterId);
        orderEntry.getValue().forEach(order -> invalidIFOrderCode.add(order.getOrderCode()));
    }
}
if (poList.size() > 0) {
    saveProductOrder(poList);
}
Log.info(InventoryConstants.LOG_UPDATEIFORDER_SAVE_ORDER_SIZE, poList.size());
==============
private void saveProdList(Map<String, List<ProductOrder>> orderGroupMap, List<String> counterIds) {
    List<ProductOrder> productOrderList = new ArrayList<>();
    log.info(InventoryConstants.LOG_UPDATEIFORDER_SAVE_ORDER);

    for (Map.Entry<String, List<ProductOrder>> orderEntry : orderGroupMap.entrySet()) {
        try {
            List<ProductOrder> orders = orderEntry.getValue();
            String counterId = orderEntry.getKey();

            // Validate order size
            if (orders.size() > 1) {
                String errorMessage = String.format("More than one order is not allowed for counterId: %s", counterId);
                log.error(errorMessage);
                throw new IllegalStateException(errorMessage);
            }

            String realCounterId = getRealCounterId(counterId);

            if (counterIds.contains(counterId)) {
                log.info("Processing counterId: {}", counterId);

                ProductOrder draftOrder = findDraftOrderByCounterId(realCounterId);

                if (draftOrder != null) {
                    String orderCodeFromRequest = orders.get(0).getOrderCode();

                    if (!orderCodeFromRequest.equals(draftOrder.getOrderCode())) {
                        draftOrder.setOrderState(OrderState.EXPIRED);
                        entityManager.merge(draftOrder);
                        log.info("Updated order state to EXPIRED for draftOrder with ID: {}", draftOrder.getId());
                    }
                }

                // Add all orders from the current entry to the product order list
                productOrderList.addAll(orders);
            } else {
                handleInvalidCounter(counterId, orders);
            }
        } catch (Exception e) {
            log.error("Error processing order for counterId: {}. Skipping this order entry. Error: {}", orderEntry.getKey(), e.getMessage(), e);
            // Continue with the next iteration
        }
    }

    if (!productOrderList.isEmpty()) {
        saveProductOrder(productOrderList);
    }

    log.info(InventoryConstants.LOG_UPDATEIFORDER_SAVE_ORDER_SIZE, productOrderList.size());
}

/**
 * Find the draft order for a given counter ID.
 *
 * @param realCounterId the real counter ID
 * @return the draft order or null if not found
 */
private ProductOrder findDraftOrderByCounterId(String realCounterId) {
    return entityManager.createQuery(
            "SELECT po FROM ProductOrder po WHERE po.counterId = :counterId AND po.orderState = :orderState",
            ProductOrder.class)
        .setParameter("counterId", realCounterId)
        .setParameter("orderState", OrderState.DRAFT)
        .getResultStream()
        .findFirst()
        .orElse(null);
}

/**
 * Handle invalid counter scenarios by logging and recording invalid counters and order codes.
 *
 * @param counterId the invalid counter ID
 * @param orders    the list of invalid orders
 */
private void handleInvalidCounter(String counterId, List<ProductOrder> orders) {
    log.warn("Invalid counterId: {}", counterId);
    invalidCounter.add(counterId);
    orders.forEach(order -> {
        invalidIFOrderCode.add(order.getOrderCode());
        log.warn("Invalid orderCode: {} for counterId: {}", order.getOrderCode(), counterId);
    });
}

