import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.io.ByteArrayInputStream;

@RestController
@RequestMapping("/api/pdf")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping("/employee-report")
    public ResponseEntity<byte[]> getEmployeeReport() {
        ByteArrayInputStream bis = employeeService.generateEmployeeReport();

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Disposition", "inline; filename=employee_report.pdf");

        return ResponseEntity.ok()
                .headers(headers)
                .contentType(MediaType.APPLICATION_PDF)
                .body(bis.readAllBytes());
    }
}
import com.lowagie.text.Document;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.List;

@Service
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Override
    public ByteArrayInputStream generateEmployeeReport() {
        List<Employee> employees = employeeRepository.findAll();
        Document document = new Document();
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        try {
            PdfWriter.getInstance(document, out);
            document.open();

            document.add(new Paragraph("Employee Report"));
            document.add(new Paragraph(" ")); // Adding a blank line

            for (Employee emp : employees) {
                document.add(new Paragraph("ID: " + emp.getId()));
                document.add(new Paragraph("Name: " + emp.getName()));
                document.add(new Paragraph("Department: " + emp.getDepartment()));
                document.add(new Paragraph("Salary: $" + emp.getSalary()));
                document.add(new Paragraph(" ")); // Adding a blank line
            }

            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return new ByteArrayInputStream(out.toByteArray());
    }
}
import java.io.ByteArrayInputStream;

public interface EmployeeService {
    ByteArrayInputStream generateEmployeeReport();
}
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
}
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <dependency>
        <groupId>com.microsoft.sqlserver</groupId>
        <artifactId>mssql-jdbc</artifactId>
        <version>10.2.1.jre8</version>
    </dependency>

    <dependency>
        <groupId>com.github.librepdf</groupId>
        <artifactId>openpdf</artifactId>
        <version>1.3.30</version>
    </dependency>

    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
    </dependency>
</dependencies>

SELECT 
    T.member_id,
    T.counter_id,
    SUM(T.transaction_retail_amount) AS TRANSACTION_AMOUNT
FROM 
    transaction_order T
INNER JOIN 
    counter C ON C.id = T.counter_id AND C.counter_state = 'Normal'
-- Join with transaction_property_item to check TRANSACTION_HAS_PRODUCT
INNER JOIN 
    transaction_property_item PI 
    ON PI.transaction_id = T.transaction_order_id 
    AND PI.cr_key = 'TRANSACTION_HAS_PRODUCT' 
    AND PI.cr_value = 1
WHERE 
    T.TRANSACTION_TYPE = 'Normal'
    AND (T.TRANSACTION_HAS_PURCHASE = 1 OR T.TRANSACTION_HAS_RETURN = 1)
    AND T.purchase_date >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
    AND CAST(T.purchase_date AS DATE) <= CAST(GETDATE() AS DATE)
GROUP BY 
    T.member_id, T.counter_id;
SELECT 
    T.member_id,
    T.counter_id,
    SUM(T.transaction_retail_amount) AS TRANSACTION_AMOUNT
FROM 
    transaction_order T
INNER JOIN 
    counter C ON C.id = T.counter_id AND C.counter_state = 'Normal'
-- Join with transaction_property_item for TRANSACTION_HAS_PRODUCT, TRANSACTION_HAS_PURCHASE, and TRANSACTION_HAS_RETURN
INNER JOIN 
    transaction_property_item PI_PRODUCT 
    ON PI_PRODUCT.transaction_id = T.transaction_order_id 
    AND PI_PRODUCT.cr_key = 'TRANSACTION_HAS_PRODUCT' 
    AND PI_PRODUCT.cr_value = 1
INNER JOIN 
    transaction_property_item PI_PURCHASE 
    ON PI_PURCHASE.transaction_id = T.transaction_order_id 
    AND PI_PURCHASE.cr_key = 'TRANSACTION_HAS_PURCHASE'
    AND PI_PURCHASE.cr_value = 1
LEFT JOIN 
    transaction_property_item PI_RETURN 
    ON PI_RETURN.transaction_id = T.transaction_order_id 
    AND PI_RETURN.cr_key = 'TRANSACTION_HAS_RETURN'
    AND PI_RETURN.cr_value = 1
WHERE 
    T.TRANSACTION_TYPE = 'Normal'
    AND (
        PI_PURCHASE.cr_value = 1 OR PI_RETURN.cr_value = 1 -- Apply the OR condition
    )
    AND T.purchase_date >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
    AND CAST(T.purchase_date AS DATE) <= CAST(GETDATE() AS DATE)
GROUP BY 
    T.member_id, T.counter_id;
=========================================
SELECT 
    T.member_id,
    T.counter_id,
    SUM(T.transaction_retail_amount) AS TRANSACTION_AMOUNT
FROM 
    transaction_order T
INNER JOIN 
    counter C ON C.id = T.counter_id AND C.counter_state = 'Normal'
-- Join with transaction_property_item for TRANSACTION_HAS_PRODUCT, TRANSACTION_HAS_PURCHASE, and TRANSACTION_HAS_RETURN
INNER JOIN 
    transaction_property_item PI_PRODUCT 
    ON PI_PRODUCT.transaction_id = T.transaction_order_id 
    AND PI_PRODUCT.cr_key = 'TRANSACTION_HAS_PRODUCT' 
    AND PI_PRODUCT.cr_value = 1
INNER JOIN 
    transaction_property_item PI_PURCHASE 
    ON PI_PURCHASE.transaction_id = T.transaction_order_id 
    AND PI_PURCHASE.cr_key = 'TRANSACTION_HAS_PURCHASE'
    AND PI_PURCHASE.cr_value = 1
LEFT JOIN 
    transaction_property_item PI_RETURN 
    ON PI_RETURN.transaction_id = T.transaction_order_id 
    AND PI_RETURN.cr_key = 'TRANSACTION_HAS_RETURN'
    AND PI_RETURN.cr_value = 1
WHERE 
    T.TRANSACTION_TYPE = 'Normal'
    AND (
        PI_PURCHASE.cr_value = 1 OR PI_RETURN.cr_value = 1 -- Apply the OR condition
    )
    AND T.purchase_date >= DATEADD(MONTH, -12, CAST(GETDATE() AS DATE))
    AND CAST(T.purchase_date AS DATE) <= CAST(GETDATE() AS DATE)
GROUP BY 
    T.member_id, T.counter_id;

=============================
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import javax.persistence.AttributeConverter;

import static org.junit.jupiter.api.Assertions.*;

class SkinResultEnumTest {

    private final AttributeConverter<SkinResultEnum, Integer> converter = new SkinResultEnum.EnumConverter();

    @Test
    void testConvertToDatabaseColumn() {
        // Test conversion to database column
        assertEquals(0, converter.convertToDatabaseColumn(SkinResultEnum.NO_DATA));
        assertEquals(1, converter.convertToDatabaseColumn(SkinResultEnum.WEEK));
        assertEquals(2, converter.convertToDatabaseColumn(SkinResultEnum.EVERAGE));
        assertEquals(3, converter.convertToDatabaseColumn(SkinResultEnum.BEAUTY));

        // Test null conversion (should return NO_DATA code)
        assertEquals(0, converter.convertToDatabaseColumn(null));
    }

    @Test
    void testConvertToEntityAttribute() {
        // Test conversion from database value to enum
        assertEquals(SkinResultEnum.NO_DATA, converter.convertToEntityAttribute(0));
        assertEquals(SkinResultEnum.WEEK, converter.convertToEntityAttribute(1));
        assertEquals(SkinResultEnum.EVERAGE, converter.convertToEntityAttribute(2));
        assertEquals(SkinResultEnum.BEAUTY, converter.convertToEntityAttribute(3));

        // Test invalid code (should return NO_DATA)
        assertEquals(SkinResultEnum.NO_DATA, converter.convertToEntityAttribute(99));
    }

    @ParameterizedTest
    @CsvSource({
        "0, NO_DATA",
        "1, WEEK",
        "2, EVERAGE",
        "3, BEAUTY",
        "99, null" // Test case for invalid code
    })
    void testGetByCode(Integer code, SkinResultEnum expected) {
        if (expected == null) {
            assertNull(SkinResultEnum.getByCode(code));
        } else {
            assertEquals(expected, SkinResultEnum.getByCode(code));
        }
    }
}
======
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

public class SFTPConnectionTest {

    public static void main(String[] args) {
        String sftpHost = "your_sftp_server_ip"; // Replace with SFTP server IP
        int sftpPort = 22; // Default SFTP port
        String sftpUser = "your_username"; // Replace with username
        String sftpPassword = "your_password"; // Replace with password

        Session session = null;

        try {
            JSch jsch = new JSch();
            session = jsch.getSession(sftpUser, sftpHost, sftpPort);
            session.setPassword(sftpPassword);

            // Disable strict host key checking for this test
            session.setConfig("StrictHostKeyChecking", "no");

            System.out.println("Connecting to SFTP server...");
            session.connect(30000); // 30 seconds timeout
            System.out.println("Connected successfully!");

        } catch (Exception e) {
            System.err.println("Failed to connect to SFTP server: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (session != null && session.isConnected()) {
                session.disconnect();
                System.out.println("Disconnected from SFTP server.");
            }
        }
    }
}
