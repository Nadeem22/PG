mvn -Dtest=ProductControllerIT#shouldReturnHttpStatusOKWhenReservableProductsCalled test

INSERT INTO dbo.product_property_category (
    id, 
    code, 
    name, 
    property_value, 
    property_type, 
    is_active, 
    created_by, 
    created_date, 
    last_modified_by, 
    last_modified_date, 
    market_code
) VALUES (
    '123e4567-e89b-12d3-a456-426614174000', 
    'C001', 
    'Category Name 1', 
    'Value 1', 
    1, 
    1, 
    'user1', 
    '2023-08-20 10:00:00 +00:00', 
    'user1', 
    '2023-08-20 10:00:00 +00:00', 
    'US'
);

INSERT INTO dbo.product_property_category (
    id, 
    code, 
    name, 
    property_value, 
    property_type, 
    is_active, 
    created_by, 
    created_date, 
    last_modified_by, 
    last_modified_date, 
    market_code
) VALUES (
    '223e4567-e89b-12d3-a456-426614174001', 
    'C002', 
    'Category Name 2', 
    'Value 2', 
    2, 
    1, 
    'user2', 
    '2023-08-20 11:00:00 +00:00', 
    'user2', 
    '2023-08-20 11:00:00 +00:00', 
    'JP'
);

INSERT INTO dbo.product_property_category (
    id, 
    code, 
    name, 
    property_value, 
    property_type, 
    is_active, 
    created_by, 
    created_date, 
    last_modified_by, 
    last_modified_date, 
    market_code
) VALUES (
    '323e4567-e89b-12d3-a456-426614174002', 
    'C003', 
    'Category Name 3', 
    'Value 3', 
    3, 
    1, 
    'user3', 
    '2023-08-20 12:00:00 +00:00', 
    'user3', 
    '2023-08-20 12:00:00 +00:00', 
    'IN'
);
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class MyTest {

    @Test
    @Order(1)
    public void testA() {
        // This will run first
    }

    @Test
    @Order(2)
    public void testB() {
        // This will run second
    }

    @Test
    @Order(3)
    public void testC() {
        // This will run third
    }
}

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.time.ZonedDateTime;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class YourClassTest {

    private YourClass yourClass;

    @BeforeEach
    void setUp() {
        yourClass = new YourClass();
        // If your method depends on any services or configurations, mock them here
    }

    @Test
    void testIsAfterInboundSwitchDate_WithFutureDate() {
        ZonedDateTime now = ZonedDateTime.now();
        ZonedDateTime futureDate = now.plusDays(10);
        String marketCode = "US";

        boolean result = yourClass.isAfterInboundSwitchDate(futureDate, marketCode);
        assertTrue(result, "Expected future date to be after the inbound switch date");
    }

    @Test
    void testIsAfterInboundSwitchDate_WithPastDate() {
        ZonedDateTime now = ZonedDateTime.now();
        ZonedDateTime pastDate = now.minusDays(10);
        String marketCode = "US";

        boolean result = yourClass.isAfterInboundSwitchDate(pastDate, marketCode);
        assertFalse(result, "Expected past date to not be after the inbound switch date");
    }

    @Test
    void testIsAfterInboundSwitchDate_WithCurrentDate() {
        ZonedDateTime now = ZonedDateTime.now();
        String marketCode = "US";

        boolean result = yourClass.isAfterInboundSwitchDate(now, marketCode);
        // The expected result might depend on how precisely the switch date is defined.
        // Assuming the switch date does not include the current date
        assertFalse(result, "Expected the current date to not be after the inbound switch date");
    }

    @Test
    void testIsAfterInboundSwitchDate_WithNullDate() {
        String marketCode = "US";

        Exception exception = assertThrows(NullPointerException.class, () -> {
            yourClass.isAfterInboundSwitchDate(null, marketCode);
        });

        String expectedMessage = "Target date must not be null";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }

    // You might also want to test with different market codes if they affect the logic
}
// Filtering out non-duplicates (keeping only duplicates)
    Map<Long, Long> duplicates = itemCounts.entrySet().stream()
                                           .filter(entry -> entry.getValue() > 1)
                                           .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

    // Printing out duplicates
    if (duplicates.isEmpty()) {
        System.out.println("No duplicates found.");
    } else {
        System.out.println("Duplicate NewAuditItemIds found:");
        duplicates.forEach((id, count) -> System.out.println("NewAuditItemId: " + id + ", Count: " + count));
    }
