
import com.lowagie.text.Document;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

@Service
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Override
    public String generateAndStoreEmployeeReport() {
        List<Employee> employees = employeeRepository.findAll();
        Document document = new Document();

        // Specify the directory and file name where you want to store the PDF
        String directoryPath = "/path/to/directory";  // Change this path as needed
        String fileName = "Employee_Report.pdf";
        String fullPath = directoryPath + File.separator + fileName;

        try {
            // Ensure the directory exists or create it
            File directory = new File(directoryPath);
            if (!directory.exists()) {
                directory.mkdirs();  // Create the directory if it doesn't exist
            }

            // Create a FileOutputStream to write the PDF to the specified location
            FileOutputStream out = new FileOutputStream(fullPath);
            PdfWriter.getInstance(document, out);

            document.open();
            document.add(new Paragraph("Employee Report"));
            document.add(new Paragraph(" "));  // Blank line

            for (Employee emp : employees) {
                document.add(new Paragraph("ID: " + emp.getId()));
                document.add(new Paragraph("Name: " + emp.getName()));
                document.add(new Paragraph("Department: " + emp.getDepartment()));
                document.add(new Paragraph("Salary: $" + emp.getSalary()));
                document.add(new Paragraph(" "));  // Blank line
            }

            document.close();
            out.close();
            return "PDF stored at: " + fullPath;

        } catch (IOException e) {
            e.printStackTrace();
            return "Error generating PDF: " + e.getMessage();
        }
    }
}
===================
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/pdf")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping("/generate")
    public String generateAndStorePdf() {
        return employeeService.generateAndStoreEmployeeReport();
    }
}
import com.lowagie.text.*;
import com.lowagie.text.pdf.*;

import java.awt.Color;
import java.io.FileOutputStream;

public class PDFFormattingExample {

    public static void main(String[] args) {
        try {
            // Create a Document instance
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream("formatted_table.pdf"));
            document.open();

            // Set the font style and size
            Font headerFont = new Font(Font.HELVETICA, 14, Font.BOLD, Color.WHITE);
            Font bodyFont = new Font(Font.HELVETICA, 12, Font.NORMAL, Color.BLACK);

            // Create a table with 3 columns
            PdfPTable table = new PdfPTable(3);
            table.setWidthPercentage(100); // Full width
            table.setSpacingBefore(10f);  // Space before the table
            table.setSpacingAfter(10f);   // Space after the table

            // Set column widths (percentage of total width)
            table.setWidths(new float[]{2f, 2f, 1f});

            // Create a header cell with background color
            PdfPCell headerCell = new PdfPCell(new Phrase("Header 1", headerFont));
            headerCell.setBackgroundColor(Color.DARK_GRAY);
            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            headerCell.setPadding(10);
            table.addCell(headerCell);

            headerCell = new PdfPCell(new Phrase("Header 2", headerFont));
            headerCell.setBackgroundColor(Color.DARK_GRAY);
            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            headerCell.setPadding(10);
            table.addCell(headerCell);

            headerCell = new PdfPCell(new Phrase("Header 3", headerFont));
            headerCell.setBackgroundColor(Color.DARK_GRAY);
            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            headerCell.setPadding(10);
            table.addCell(headerCell);

            // Add body cells with different alignments and padding
            PdfPCell bodyCell = new PdfPCell(new Phrase("Row 1, Col 1", bodyFont));
            bodyCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            bodyCell = new PdfPCell(new Phrase("Row 1, Col 2", bodyFont));
            bodyCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            bodyCell = new PdfPCell(new Phrase("Row 1, Col 3", bodyFont));
            bodyCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            // Add another row with background color for cells
            bodyCell = new PdfPCell(new Phrase("Row 2, Col 1", bodyFont));
            bodyCell.setBackgroundColor(Color.LIGHT_GRAY);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            bodyCell = new PdfPCell(new Phrase("Row 2, Col 2", bodyFont));
            bodyCell.setBackgroundColor(Color.LIGHT_GRAY);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            bodyCell = new PdfPCell(new Phrase("Row 2, Col 3", bodyFont));
            bodyCell.setBackgroundColor(Color.LIGHT_GRAY);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            // Add table to document
            document.add(table);

            document.close();
            System.out.println("PDF created successfully!");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
=====================================
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="1" author="nadeem">
        <!-- Precondition: Check if the table exists -->
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="vip_counter_summary"/>
            </not>
        </preConditions>

        <!-- Create Table: vip_counter_summary -->
        <createTable tableName="vip_counter_summary">
            <column name="id" type="VARCHAR(36)">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="member_id" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="counter_id" type="VARCHAR(255)">
                <constraints nullable="true"/>
            </column>
            <column name="count" type="DOUBLE PRECISION">
                <constraints nullable="true"/>
            </column>
            <column name="total_count" type="DOUBLE PRECISION">
                <constraints nullable="true"/>
            </column>
            <column name="ammount" type="DOUBLE PRECISION">
                <constraints nullable="true"/>
            </column>
            <column name="total_ammount" type="DOUBLE PRECISION">
                <constraints nullable="true"/>
            </column>
            <column name="created_at" type="TIMESTAMP">
                <constraints nullable="true"/>
            </column>
        </createTable>

        <!-- Add Indexes for Faster Lookup -->
        <createIndex indexName="idx_member_id" tableName="vip_counter_summary">
            <column name="member_id"/>
        </createIndex>

        <createIndex indexName="idx_counter_id" tableName="vip_counter_summary">
            <column name="counter_id"/>
        </createIndex>

    </changeSet>

</databaseChangeLog>
=================================
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <include file="db/changelog/db.changelog-1.0.xml" relativeToChangelogFile="true"/>
</databaseChangeLog>
==============================================================
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="add-am-status-and-data-status-columns" author="nadeem">
        <preConditions onFail="MARK_RAN">
            <not>
                <columnExists tableName="vip_summary" columnName="am_status"/>
            </not>
        </preConditions>

        <addColumn tableName="vip_summary">
            <column name="am_status" type="BOOLEAN"/>
            <column name="data_status" type="BOOLEAN"/>
        </addColumn>
    </changeSet>

</databaseChangeLog>
============================================
-- Insert 10 records for the first member_id
INSERT INTO vip_summary (id, member_id, counter_id, count, total_count, total_amount, created_at)
VALUES 
('1', 'member_1', 'counter_1', 5.0, 10.0, 100.0, GETDATE()), -- Same counter
('2', 'member_1', 'counter_1', 6.0, 15.0, 150.0, GETDATE()),
('3', 'member_1', 'counter_1', 7.0, 20.0, 200.0, GETDATE()),

('4', 'member_1', 'counter_2', 3.0, 5.0, 50.0, GETDATE()), -- Different counter
('5', 'member_1', 'counter_3', 4.0, 8.0, 80.0, GETDATE()),
('6', 'member_1', 'counter_4', 2.0, 4.0, 40.0, GETDATE()),

('7', 'member_1', 'counter_5', 1.0, 2.0, 20.0, GETDATE()), -- 4 different counters
('8', 'member_1', 'counter_6', 1.5, 3.0, 30.0, GETDATE()),
('9', 'member_1', 'counter_7', 2.5, 5.0, 50.0, GETDATE()),
('10', 'member_1', 'counter_8', 3.5, 7.0, 70.0, GETDATE());

-- Insert 10 records for the second member_id
INSERT INTO vip_summary (id, member_id, counter_id, count, total_count, total_amount, created_at)
VALUES 
('11', 'member_2', 'counter_1', 5.0, 10.0, 100.0, GETDATE()), -- Same counter
('12', 'member_2', 'counter_1', 6.0, 15.0, 150.0, GETDATE()),
('13', 'member_2', 'counter_1', 7.0, 20.0, 200.0, GETDATE()),

('14', 'member_2', 'counter_2', 3.0, 5.0, 50.0, GETDATE()), -- Different counter
('15', 'member_2', 'counter_3', 4.0, 8.0, 80.0, GETDATE()),
('16', 'member_2', 'counter_4', 2.0, 4.0, 40.0, GETDATE()),

('17', 'member_2', 'counter_5', 1.0, 2.0, 20.0, GETDATE()), -- 4 different counters
('18', 'member_2', 'counter_6', 1.5, 3.0, 30.0, GETDATE()),
('19', 'member_2', 'counter_7', 2.5, 5.0, 50.0, GETDATE()),
('20', 'member_2', 'counter_8', 3.5, 7.0, 70.0, GETDATE());
=============================================================
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.springframework.boot.test.context.SpringBootTest;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SpringBootTest
public class VipCounterServiceTest {

    @Mock
    private VipCounterSummaryRepository vipCounterSummaryRepository;

    @Mock
    private VipProfileRepository vipProfileRepository;

    @Mock
    private Logger logger;

    @InjectMocks
    private VipCounterService vipCounterService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testUpdateMainCounterForAllVips_NoVipsFound() {
        // Mock behavior
        when(vipCounterSummaryRepository.findAll()).thenReturn(Collections.emptyList());

        // Execute the method
        vipCounterService.updateMainCounterForAllVips();

        // Verify logger and method interactions
        verify(logger).warn("No   VIP: {}. Skipping update.", Collections.emptyList());
        verifyNoMoreInteractions(vipCounterSummaryRepository, vipProfileRepository);
    }

    @Test
    public void testUpdateMainCounterForAllVips_WithValidVips() {
        // Mock data
        List<VipCounterSummary> summaries = Arrays.asList(
            new VipCounterSummary("vip1", "counter1", 10, 20, BigDecimal.valueOf(100), BigDecimal.valueOf(500)),
            new VipCounterSummary("vip1", "counter2", 15, 20, BigDecimal.valueOf(200), BigDecimal.valueOf(500))
        );
        when(vipCounterSummaryRepository.findAll()).thenReturn(List.of(summaries.get(0)));
        when(vipCounterSummaryRepository.findByVipId("vip1")).thenReturn(summaries);

        // Execute the method
        vipCounterService.updateMainCounterForAllVips();

        // Verify the correct main counter was updated
        verify(vipProfileRepository).updateMainCounter("vip1", "counter2", true);
    }

    @Test
    public void testUpdateMainCounterForVip_NoSummariesFound() {
        // Mock data
        when(vipCounterSummaryRepository.findByVipId("vip1")).thenReturn(Collections.emptyList());

        // Execute the method
        vipCounterService.updateMainCounterForVip("vip1");

        // Verify logger and repository interactions
        verify(logger).warn("No summaries found for VIP: {}. Skipping update.", "vip1");
        verifyNoInteractions(vipProfileRepository);
    }

    @Test
    public void testCalculateRate_DivisionByZero() {
        // Mock a summary with zero totals to trigger division by zero
        VipCounterSummary summary = new VipCounterSummary("vip1", "counter1", 0, 0, BigDecimal.ZERO, BigDecimal.ZERO);

        // Execute the method
        BigDecimal rate = vipCounterService.calculateRate(summary);

        // Assert the rate is zero and verify logger interaction
        assertEquals(BigDecimal.ZERO, rate);
        verify(logger).error("Error calculating rate for counter: {} due to division by zero.", "counter1");
    }

    @Test
    public void testCalculateRate_ValidSummary() {
        // Mock valid summary data
        VipCounterSummary summary = new VipCounterSummary("vip1", "counter1", 10, 20, BigDecimal.valueOf(100), BigDecimal.valueOf(500));

        // Execute the method
        BigDecimal rate = vipCounterService.calculateRate(summary);

        // Assert the rate is calculated correctly
        BigDecimal expectedRate = new BigDecimal("0.60")
            .multiply(BigDecimal.valueOf(10))
            .divide(BigDecimal.valueOf(20), BigDecimal.ROUND_HALF_UP)
            .add(new BigDecimal("0.40")
            .multiply(BigDecimal.valueOf(100))
            .divide(BigDecimal.valueOf(500), BigDecimal.ROUND_HALF_UP));

        assertEquals(expectedRate, rate);
    }
}
====================================
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

class VipServiceTest {

    @Mock
    private VipCounterSummaryRepository vipCounterSummaryRepository;

    @Mock
    private VipSummaryRepository vipSummaryRepository;

    @InjectMocks
    private VipService vipService; // Assuming the method is in a class named VipService

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this); // Initialize mocks
    }

    @Test
    void testUpdateMainCounterForVip_NoSummariesFound() {
        // Arrange
        String memberId = "123";
        when(vipCounterSummaryRepository.findByMemberId(memberId))
            .thenReturn(Collections.emptyList()); // No summaries

        // Act
        vipService.updateMainCounterForVip(memberId);

        // Assert
        verify(vipSummaryRepository, never()).updateMainCounter(anyString(), anyString(), anyBoolean());
    }

    @Test
    void testUpdateMainCounterForVip_ValidMainCounterFound() {
        // Arrange
        String memberId = "123";
        VipCounterSummaryModel summary1 = new VipCounterSummaryModel("1", new BigDecimal("2.5"));
        VipCounterSummaryModel summary2 = new VipCounterSummaryModel("2", new BigDecimal("3.5"));
        List<VipCounterSummaryModel> summaries = Arrays.asList(summary1, summary2);

        when(vipCounterSummaryRepository.findByMemberId(memberId)).thenReturn(summaries);

        // Act
        vipService.updateMainCounterForVip(memberId);

        // Assert
        verify(vipSummaryRepository).updateMainCounter(memberId, "2", true); // "2" has max rate of 3.5
    }

    @Test
    void testUpdateMainCounterForVip_ExceptionDuringUpdate() {
        // Arrange
        String memberId = "123";
        VipCounterSummaryModel summary = new VipCounterSummaryModel("1", new BigDecimal("2.5"));
        when(vipCounterSummaryRepository.findByMemberId(memberId)).thenReturn(List.of(summary));
        doThrow(new RuntimeException("Database error"))
            .when(vipSummaryRepository).updateMainCounter(anyString(), anyString(), anyBoolean());

        // Act & Assert
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            vipService.updateMainCounterForVip(memberId);
        });
        assertTrue(exception.getMessage().contains("Failed to update main counter"));
    }
}

