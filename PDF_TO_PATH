
import com.lowagie.text.Document;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

@Service
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Override
    public String generateAndStoreEmployeeReport() {
        List<Employee> employees = employeeRepository.findAll();
        Document document = new Document();

        // Specify the directory and file name where you want to store the PDF
        String directoryPath = "/path/to/directory";  // Change this path as needed
        String fileName = "Employee_Report.pdf";
        String fullPath = directoryPath + File.separator + fileName;

        try {
            // Ensure the directory exists or create it
            File directory = new File(directoryPath);
            if (!directory.exists()) {
                directory.mkdirs();  // Create the directory if it doesn't exist
            }

            // Create a FileOutputStream to write the PDF to the specified location
            FileOutputStream out = new FileOutputStream(fullPath);
            PdfWriter.getInstance(document, out);

            document.open();
            document.add(new Paragraph("Employee Report"));
            document.add(new Paragraph(" "));  // Blank line

            for (Employee emp : employees) {
                document.add(new Paragraph("ID: " + emp.getId()));
                document.add(new Paragraph("Name: " + emp.getName()));
                document.add(new Paragraph("Department: " + emp.getDepartment()));
                document.add(new Paragraph("Salary: $" + emp.getSalary()));
                document.add(new Paragraph(" "));  // Blank line
            }

            document.close();
            out.close();
            return "PDF stored at: " + fullPath;

        } catch (IOException e) {
            e.printStackTrace();
            return "Error generating PDF: " + e.getMessage();
        }
    }
}
===================
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/pdf")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping("/generate")
    public String generateAndStorePdf() {
        return employeeService.generateAndStoreEmployeeReport();
    }
}
import com.lowagie.text.*;
import com.lowagie.text.pdf.*;

import java.awt.Color;
import java.io.FileOutputStream;

public class PDFFormattingExample {

    public static void main(String[] args) {
        try {
            // Create a Document instance
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream("formatted_table.pdf"));
            document.open();

            // Set the font style and size
            Font headerFont = new Font(Font.HELVETICA, 14, Font.BOLD, Color.WHITE);
            Font bodyFont = new Font(Font.HELVETICA, 12, Font.NORMAL, Color.BLACK);

            // Create a table with 3 columns
            PdfPTable table = new PdfPTable(3);
            table.setWidthPercentage(100); // Full width
            table.setSpacingBefore(10f);  // Space before the table
            table.setSpacingAfter(10f);   // Space after the table

            // Set column widths (percentage of total width)
            table.setWidths(new float[]{2f, 2f, 1f});

            // Create a header cell with background color
            PdfPCell headerCell = new PdfPCell(new Phrase("Header 1", headerFont));
            headerCell.setBackgroundColor(Color.DARK_GRAY);
            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            headerCell.setPadding(10);
            table.addCell(headerCell);

            headerCell = new PdfPCell(new Phrase("Header 2", headerFont));
            headerCell.setBackgroundColor(Color.DARK_GRAY);
            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            headerCell.setPadding(10);
            table.addCell(headerCell);

            headerCell = new PdfPCell(new Phrase("Header 3", headerFont));
            headerCell.setBackgroundColor(Color.DARK_GRAY);
            headerCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            headerCell.setPadding(10);
            table.addCell(headerCell);

            // Add body cells with different alignments and padding
            PdfPCell bodyCell = new PdfPCell(new Phrase("Row 1, Col 1", bodyFont));
            bodyCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            bodyCell = new PdfPCell(new Phrase("Row 1, Col 2", bodyFont));
            bodyCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            bodyCell = new PdfPCell(new Phrase("Row 1, Col 3", bodyFont));
            bodyCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            // Add another row with background color for cells
            bodyCell = new PdfPCell(new Phrase("Row 2, Col 1", bodyFont));
            bodyCell.setBackgroundColor(Color.LIGHT_GRAY);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            bodyCell = new PdfPCell(new Phrase("Row 2, Col 2", bodyFont));
            bodyCell.setBackgroundColor(Color.LIGHT_GRAY);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            bodyCell = new PdfPCell(new Phrase("Row 2, Col 3", bodyFont));
            bodyCell.setBackgroundColor(Color.LIGHT_GRAY);
            bodyCell.setPadding(8);
            table.addCell(bodyCell);

            // Add table to document
            document.add(table);

            document.close();
            System.out.println("PDF created successfully!");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
=====================================
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <changeSet id="1" author="nadeem">
        <!-- Precondition: Check if the table exists -->
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="vip_counter_summary"/>
            </not>
        </preConditions>

        <!-- Create Table: vip_counter_summary -->
        <createTable tableName="vip_counter_summary">
            <column name="id" type="VARCHAR(36)">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="member_id" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="counter_id" type="VARCHAR(255)">
                <constraints nullable="true"/>
            </column>
            <column name="count" type="DOUBLE PRECISION">
                <constraints nullable="true"/>
            </column>
            <column name="total_count" type="DOUBLE PRECISION">
                <constraints nullable="true"/>
            </column>
            <column name="ammount" type="DOUBLE PRECISION">
                <constraints nullable="true"/>
            </column>
            <column name="total_ammount" type="DOUBLE PRECISION">
                <constraints nullable="true"/>
            </column>
            <column name="created_at" type="TIMESTAMP">
                <constraints nullable="true"/>
            </column>
        </createTable>

        <!-- Add Indexes for Faster Lookup -->
        <createIndex indexName="idx_member_id" tableName="vip_counter_summary">
            <column name="member_id"/>
        </createIndex>

        <createIndex indexName="idx_counter_id" tableName="vip_counter_summary">
            <column name="counter_id"/>
        </createIndex>

    </changeSet>

</databaseChangeLog>
=================================
<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <include file="db/changelog/db.changelog-1.0.xml" relativeToChangelogFile="true"/>
</databaseChangeLog>
