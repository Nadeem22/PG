Optional.ofNullable(productType)
            .filter(ProductType.PRODUCT::equals)
            .ifPresent(pt -> {
                if (requestType == RequestType.TR) {
                    cssParameterRequest.setCatalog(ParameterCatalogType.SAMPLE_TR_CATALOG_ID.getCode());
                } else {
                    cssParameterRequest.setCatalog(ParameterCatalogType.PRODUCT_CATALOG_ID.getCode());
                }
            });


flowchart TD
    A[Customer Returns Bottles]:::event
    B[Store Records Return]:::process
    C[Event Created]:::event
    D[(Inventory Service Updates Store Inventory in DB)]:::database
    E{Store Decides to Return Bottles to Warehouse}:::decision
    F[Store Manager Approval]:::process
    G[Store Returns Bottles to Warehouse]:::process
    H[(Update Store Inventory for Warehouse Return in DB)]:::database
    I[(Update Warehouse Inventory in DB)]:::database
    J[Process Ends]:::processEnd

    A --> B
    B --> C
    C --> D
    D --> E
    E -->|Yes| F
    E -->|No| D
    F -->|Approved| G
    F -->|Not Approved| D
    G --> H
    H --> I
    I --> J

    classDef event fill:#f9f,stroke:#333,stroke-width:2px;
    classDef process fill:#bbf,stroke:#333,stroke-width:2px;
    classDef database fill:#fb8,stroke:#333,stroke-width:2px;
    classDef decision fill:#ff9,stroke:#333,stroke-width:2px;
    classDef processEnd fill:#8f8,stroke:#333,stroke-width:2px;
================
flowchart LR
    subgraph Store Returns Bottles to Warehouse
        direction LR
        A1[Store Decides to Return Bottles to Warehouse]:::process
        B1[Submit Return for Approval]:::process
        C1[Event Created on Service Bus]:::event
        D1[Notification Sent to Store Manager]:::notification
        E1{Store Manager Approval}:::decision
        F1[Store Returns Bottles to Warehouse]:::process
        G1[(Update Store Inventory in DB)]:::database
        H1[(Update Warehouse Inventory in DB)]:::database
        I1[End Process]:::processEnd

        A1 --> B1
        B1 --> C1
        C1 --> D1
        D1 --> E1
        E1 -->|Approved| F1
        E1 -->|Not Approved| G1
        F1 --> G1
        F1 --> H1
        G1 --> I1
        H1 --> I1
    end

    classDef event fill:#f9f,stroke:#333,stroke-width:2px;
    classDef process fill:#bbf,stroke:#333,stroke-width:2px;
    classDef database fill:#fb8,stroke:#333,stroke-width:2px;
    classDef decision fill:#ff9,stroke:#333,stroke-width:2px;
    classDef processEnd fill:#8f8,stroke:#333,stroke-width:2px;
    classDef notification fill:#acf,stroke:#333,stroke-width:2px;
=========

flowchart LR
    subgraph Customer Returns Bottles to Store
        direction LR
        A1[Customer Returns Bottles]:::event
        B1{Registered User?}:::decision
        C1[Store Records Return]:::process
        D1[Event Created on Service Bus]:::event
        E1[(Inventory Service Updates Store Inventory in DB)]:::database
        F1[Miracle Drops Credited to User]:::process
        G1[No Miracle Drops Credited]:::process

        A1 --> B1
        B1 -->|Yes| C1
        B1 -->|No| C1
        C1 --> D1
        D1 --> E1
        B1 -->|Yes| F1
        B1 -->|No| G1
    end

    

    classDef event fill:#f9f,stroke:#333,stroke-width:2px;
    classDef process fill:#bbf,stroke:#333,stroke-width:2px;
    classDef database fill:#fb8,stroke:#333,stroke-width:2px;
    classDef decision fill:#ff9,stroke:#333,stroke-width:2px;
    classDef processEnd fill:#8f8,stroke:#333,stroke-width:2px;


=================
flowchart LR
    subgraph Store Returns Bottles to Warehouse
        direction LR
        A1[Store Decides to Return Bottles to Warehouse]:::process
        B1[Submit Return for Approval]:::process
        C1[Event Created on Service Bus]:::event
        D1[Notification Sent to Store Manager]:::notification
        E1{Store Manager Approval}:::decision
        F1[Store Returns Bottles to Warehouse]:::process
        G1[(Update Store Inventory in DB)]:::database
        H1[(Update Warehouse Inventory in DB)]:::database
        I1[End Process]:::processEnd
        J1[Event Created for Reject Notification]:::event
        K1[Reject Notification Sent to Store]:::notification

        A1 --> B1
        B1 --> C1
        C1 --> D1
        D1 --> E1
        E1 -->|Approved| F1
        E1 -->|Not Approved| J1
        F1 --> G1
        F1 --> H1
        G1 --> I1
        H1 --> I1
        J1 --> K1
        K1 --> I1
    end
========================
flowchart LR
    subgraph Customer Returns Bottles to Store
        direction LR
        titleCustomer[ ]:::serviceTitle
        subgraph Mottanai Service
            direction LR
            A1[Customer Returns Bottles]:::event
            B1{Registered User?}:::decision
            C1[Store Records Return]:::process
            D1[Event Created on Service Bus]:::event
            E1[Miracle Drops Credited to User]:::process
            F1[No Miracle Drops Credited]:::process

            A1 --> B1
            B1 -->|Yes| C1
            B1 -->|No| C1
            C1 --> D1
            B1 -->|Yes| E1
            B1 -->|No| F1
        end
    end

    subgraph Inventory Service
        direction LR
        G1[(Inventory DB: empty_bottle_inventory_product)]:::database
        D1 --> G1
    end

    classDef event fill:#f9f,stroke:#333,stroke-width:2px,color:#fff;
    classDef process fill:#bbf,stroke:#333,stroke-width:2px,color:#fff;
    classDef database fill:#fb8,stroke:#333,stroke-width:2px,color:#fff;
    classDef decision fill:#ff9,stroke:#333,stroke-width:2px,color:#fff;
    classDef processEnd fill:#8f8,stroke:#333,stroke-width:2px,color:#fff;
    classDef notification fill:#acf,stroke:#333,stroke-width:2px,color:#fff;
    classDef serviceTitle fill:none,stroke:none,color:#333,font-size:16px;


    classDef event fill:#f9f,stroke:#333,stroke-width:2px;
    classDef process fill:#bbf,stroke:#333,stroke-width:2px;
    classDef database fill:#fb8,stroke:#333,stroke-width:2px;
    classDef decision fill:#ff9,stroke:#333,stroke-width:2px;
    classDef processEnd fill:#8f8,stroke:#333,stroke-width:2px;
    classDef notification fill:#acf,stroke:#333,stroke-width:2px;

=====================================================================
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class YourServiceClass {
    private static final Logger logger = LoggerFactory.getLogger(YourServiceClass.class);

    @Override
    public List<ProductTypeNumberDTO> addEmptyBottleInfo(List<ProductTypeNumberDTO> items, LocationStorageEmptyBottle locationStorageEmptyBottle) {
        if (locationStorageEmptyBottle == null) {
            logger.warn("LocationStorageEmptyBottle is null, returning the original items list.");
            return items; // or throw an exception based on your requirement
        }

        try {
            ProductTypeNumberDTO productTypeNumberDTO = ProductTypeNumberDTO.builder()
                .productName(InventoryConstants.PRODUCT_TYPE_DISPLAY_EMPTY_BOTTLES)
                .productValue(InventoryConstants.PRODUCT_TYPE_DISPLAY_EMPTY_BOTTLES)
                .productNumber(BigDecimal.valueOf(locationStorageEmptyBottle.getQty()))
                .build();

            items.add(productTypeNumberDTO);
        } catch (Exception e) {
            logger.error("Error while adding empty bottle info: ", e);
            // Handle the exception or rethrow it
        }

        return items;
    }
}
================================================================================================
 /**
     * Adds empty bottle information to the provided list of ProductTypeNumberDTO.
     *
     * @param items The list of ProductTypeNumberDTO to which the empty bottle information will be added.
     * @param locationStorageEmptyBottle The LocationStorageEmptyBottle containing the empty bottle details.
     * @return The updated list of ProductTypeNumberDTO.
     * @throws NullPointerException If the provided LocationStorageEmptyBottle is null.
     * @throws Exception If there is an error while adding the empty bottle information.
     */
===============================================================================================
INSERT INTO location_storage_empty_bottle (id, counter_id, qty, created_by, created_date, last_modified_by, last_modified_date)
VALUES 
('1', 'counter1', 100, 'creator1', '2024-06-27T12:00:00Z', 'modifier1', '2024-06-27T12:00:00Z'),
('2', 'counter2', 150, 'creator2', '2024-06-27T12:30:00Z', 'modifier2', '2024-06-27T12:30:00Z');
===================================================================================================
@Override
public LocationStorageEmptyBottle getEmptyBottleByCounterId(String counterId) {
    LocationStorageEmptyBottle locationStorageEmptyBottle = new LocationStorageEmptyBottle();
    try {
        locationStorageEmptyBottle = locationStorageEmptyBottleService.getEmptyBottleDetails(counterId);
    } catch (CustomNotFoundException e) {
        // Log the custom exception message
        log.warn("Counter ID {} not found: {}", counterId, e.getMessage());
    } catch (Exception e) {
        // Log any other unexpected exceptions
        log.error("An unexpected error occurred while retrieving empty bottle details for Counter ID {}: {}", counterId, e.getMessage());
    }
    return locationStorageEmptyBottle;
}


